name: "publish"
on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release
    types: [closed]

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
            artifact_pattern: |
              src-tauri/target/release/bundle/macos/*.app.tar.gz
              src-tauri/target/release/bundle/macos/*.app.tar.gz.sig
              src-tauri/target/release/bundle/dmg/*.dmg
            platform_key: "darwin-aarch64"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"
            artifact_pattern: |
              src-tauri/target/release/bundle/macos/*.app.tar.gz
              src-tauri/target/release/bundle/macos/*.app.tar.gz.sig
              src-tauri/target/release/bundle/dmg/*.dmg
            platform_key: "darwin-x86_64"
          - platform: "ubuntu-22.04"
            target: ""
            artifact_pattern: |
              src-tauri/target/release/bundle/appimage/*.AppImage
              src-tauri/target/release/bundle/appimage/*.AppImage.sig
              src-tauri/target/release/bundle/deb/*.deb
              src-tauri/target/release/bundle/rpm/*.rpm
            platform_key: "linux-x86_64"
          - platform: "windows-latest"
            target: ""
            artifact_pattern: |
              src-tauri/target/release/bundle/nsis/*.exe
              src-tauri/target/release/bundle/nsis/*.exe.sig
              src-tauri/target/release/bundle/msi/*.msi
              src-tauri/target/release/bundle/msi/*.msi.sig
            platform_key: "windows-x86_64"
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Install frontend dependencies
        run: npm install
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          args: ${{ matrix.target != '' && format('--target {0}', matrix.target) || '' }}
          includeUpdaterJson: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifacts-${{ matrix.platform }}-${{ matrix.target || 'default' }}
          path: ${{ matrix.artifact_pattern }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Prepare artifacts and generate latest.json
        run: |
          mkdir -p release-files
          declare -A binaries
          for file in $(find artifacts -type f); do
            filename=$(basename "$file")
            mv "$file" "release-files/$filename"
            case "$filename" in
              *aarch64*.app.tar.gz) binaries["darwin-aarch64"]=$filename ;;
              *x64*.app.tar.gz) binaries["darwin-x86_64"]=$filename ;;
              *aarch64*.dmg) binaries["darwin-aarch64-dmg"]=$filename ;;
              *x64*.dmg) binaries["darwin-x86_64-dmg"]=$filename ;;
              *amd64*.AppImage) binaries["linux-x86_64"]=$filename ;;
              *amd64*.deb) binaries["linux-x86_64-deb"]=$filename ;;
              *-1.x86_64.rpm) binaries["linux-x86_64-rpm"]=$filename ;;
              *x64-setup.exe) binaries["windows-x86_64"]=$filename ;;
              *x64_en-US.msi) binaries["windows-x86_64-msi"]=$filename ;;
            esac
          done
          cat <<EOF > latest.json
          {
            "version": "${{ env.VERSION }}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "darwin-aarch64": {
                "signature": "$(cat release-files/dominara_aarch64.app.tar.gz.sig 2>/dev/null || echo "")",
                "url": "https://github.com/dominara-team/dominara/releases/download/v${{ env.VERSION }}/${binaries["darwin-aarch64"]}"
              },
              "darwin-x86_64": {
                "signature": "$(cat release-files/dominara_x64.app.tar.gz.sig 2>/dev/null || echo "")",
                "url": "https://github.com/dominara-team/dominara/releases/download/v${{ env.VERSION }}/${binaries["darwin-x86_64"]}"
              },
              "linux-x86_64": {
                "signature": "$(cat release-files/dominara_${{ env.VERSION }}_amd64.AppImage.sig 2>/dev/null || echo "")",
                "url": "https://github.com/dominara-team/dominara/releases/download/v${{ env.VERSION }}/${binaries["linux-x86_64"]}"
              },
              "windows-x86_64": {
                "signature": "$(cat release-files/dominara_${{ env.VERSION }}_x64-setup.exe.sig 2>/dev/null || echo "")",
                "url": "https://github.com/dominara-team/dominara/releases/download/v${{ env.VERSION }}/${binaries["windows-x86_64"]}"
              }
            }
          }
          EOF
      - name: Create release in public repo
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Dominara v${{ env.VERSION }}
          body: "See the assets to download this version and install."
          draft: false
          prerelease: false
          files: release-files/*
          repository: dominara-team/dominara
          token: ${{ secrets.RELEASE_REPOSITORY_TOKEN }}
